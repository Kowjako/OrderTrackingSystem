<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Address" xml:space="preserve">
    <value>Адрес</value>
  </data>
  <data name="Amount" xml:space="preserve">
    <value>Кол-во</value>
  </data>
  <data name="Apartment" xml:space="preserve">
    <value>Квартира</value>
  </data>
  <data name="Buyer" xml:space="preserve">
    <value>Покупатель</value>
  </data>
  <data name="Capacity" xml:space="preserve">
    <value>Вместительность</value>
  </data>
  <data name="Caption" xml:space="preserve">
    <value>Заголовок</value>
  </data>
  <data name="Category" xml:space="preserve">
    <value>Категория</value>
  </data>
  <data name="City" xml:space="preserve">
    <value>Город</value>
  </data>
  <data name="Complaint" xml:space="preserve">
    <value>Оформлена жалоба</value>
  </data>
  <data name="ComplaintResolved" xml:space="preserve">
    <value>Решение жалобы</value>
  </data>
  <data name="ComplaintResolvedDesc" xml:space="preserve">
    <value>Жалоба решена</value>
  </data>
  <data name="ComplaintResolvedTemplate" xml:space="preserve">
    <value>Здравствуйте, принял жалобу относительно заказа {0}. Прошу о закрытие жалобы. С уважением, {1}.</value>
  </data>
  <data name="ComplaintSet" xml:space="preserve">
    <value>Создание жалобы</value>
  </data>
  <data name="ComplaintSetDesc" xml:space="preserve">
    <value>Зарегистрирована жалоба покупателя</value>
  </data>
  <data name="ComplaintSetHeader" xml:space="preserve">
    <value>Зарегистрирована новая жалоба</value>
  </data>
  <data name="ComplaintWasResolved" xml:space="preserve">
    <value>Жалоба подтверждена продацвом [АВТОМАТИЧЕСКАЯ]</value>
  </data>
  <data name="Content" xml:space="preserve">
    <value>Содержание</value>
  </data>
  <data name="Country" xml:space="preserve">
    <value>Страна</value>
  </data>
  <data name="CreateDate" xml:space="preserve">
    <value>Дата создания</value>
  </data>
  <data name="Date" xml:space="preserve">
    <value>Дата создания</value>
  </data>
  <data name="DaysToGet" xml:space="preserve">
    <value>Дней осталось</value>
  </data>
  <data name="DeliveryType" xml:space="preserve">
    <value>Тип доставки</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Описание</value>
  </data>
  <data name="Discount" xml:space="preserve">
    <value>Скидка</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>Эл. почта</value>
  </data>
  <data name="GetByLocal" xml:space="preserve">
    <value>Принята в локальном офисе</value>
  </data>
  <data name="GetByLocalDesc" xml:space="preserve">
    <value>Посылка прибыла в локальный сортировочный центр</value>
  </data>
  <data name="GetFromSeller" xml:space="preserve">
    <value>Забрана у продавца</value>
  </data>
  <data name="GetFromSellerDesc" xml:space="preserve">
    <value>Посылка забрана у отправителя</value>
  </data>
  <data name="Getted" xml:space="preserve">
    <value>Получено</value>
  </data>
  <data name="GettedDesc" xml:space="preserve">
    <value>Получена</value>
  </data>
  <data name="House" xml:space="preserve">
    <value>Дом</value>
  </data>
  <data name="MailAutomaticSetComplaint" xml:space="preserve">
    <value>Здравствуйте, создал жалобу на заказ под номером {0}. С уважением {1}.</value>
  </data>
  <data name="MailCaptionAfterSendAutomatic" xml:space="preserve">
    <value>Появилась посылка зарегестрированная на тебя [АВТОМАТИЧЕСКАЯ]</value>
  </data>
  <data name="MailContentAfterSendAutomatic" xml:space="preserve">
    <value>Здравствуйте, отправил вам посылку, её номер {0}. С уважением. {1}</value>
  </data>
  <data name="Netto" xml:space="preserve">
    <value>Нетто</value>
  </data>
  <data name="No" xml:space="preserve">
    <value>Нет</value>
  </data>
  <data name="Number" xml:space="preserve">
    <value>Номер</value>
  </data>
  <data name="Order" xml:space="preserve">
    <value>Заказ</value>
  </data>
  <data name="PayType" xml:space="preserve">
    <value>Тип оплаты</value>
  </data>
  <data name="PrepareBySellerDesc" xml:space="preserve">
    <value>Посылка подготавливается отправителем</value>
  </data>
  <data name="PrepatedBySeller" xml:space="preserve">
    <value>Подготовка посылки</value>
  </data>
  <data name="Price" xml:space="preserve">
    <value>Цена</value>
  </data>
  <data name="ReadyToPickup" xml:space="preserve">
    <value>Готова к получению</value>
  </data>
  <data name="ReadyToPickupDesc" xml:space="preserve">
    <value>Готова к получению</value>
  </data>
  <data name="Receiver" xml:space="preserve">
    <value>Получатель</value>
  </data>
  <data name="RemainDays" xml:space="preserve">
    <value>Дни на рассмотрение</value>
  </data>
  <data name="ReturnToSeller" xml:space="preserve">
    <value>Возврат продавцу</value>
  </data>
  <data name="ReturnToSellerDesc" xml:space="preserve">
    <value>Посылка возвращена отправителю</value>
  </data>
  <data name="Seller" xml:space="preserve">
    <value>Продавец</value>
  </data>
  <data name="SendDate" xml:space="preserve">
    <value>Дата отправки</value>
  </data>
  <data name="Sender" xml:space="preserve">
    <value>Отправитель</value>
  </data>
  <data name="SentFromLocal" xml:space="preserve">
    <value>Отправлена из локального офиса</value>
  </data>
  <data name="SentFromLocalDesc" xml:space="preserve">
    <value>Посылка покинула промежуточный центр</value>
  </data>
  <data name="Shop" xml:space="preserve">
    <value>Магазин</value>
  </data>
  <data name="State" xml:space="preserve">
    <value>Статус</value>
  </data>
  <data name="Street" xml:space="preserve">
    <value>Улица</value>
  </data>
  <data name="ToDelivery" xml:space="preserve">
    <value>Выдача для доставки</value>
  </data>
  <data name="ToDeliveryDesc" xml:space="preserve">
    <value>Посылка выдана к доставке</value>
  </data>
  <data name="UniqueName" xml:space="preserve">
    <value>Название</value>
  </data>
  <data name="Value" xml:space="preserve">
    <value>Сумма</value>
  </data>
  <data name="VAT" xml:space="preserve">
    <value>Налог</value>
  </data>
  <data name="WorkTime" xml:space="preserve">
    <value>Время работы</value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Да</value>
  </data>
  <data name="ZipCode" xml:space="preserve">
    <value>Почтовый код</value>
  </data>
</root>