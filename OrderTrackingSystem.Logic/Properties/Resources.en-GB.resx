<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Address" xml:space="preserve">
    <value>Address</value>
  </data>
  <data name="Amount" xml:space="preserve">
    <value>Amount</value>
  </data>
  <data name="Apartment" xml:space="preserve">
    <value>Flat</value>
  </data>
  <data name="Buyer" xml:space="preserve">
    <value>Buyer</value>
  </data>
  <data name="Capacity" xml:space="preserve">
    <value>Capacity</value>
  </data>
  <data name="Caption" xml:space="preserve">
    <value>Title</value>
  </data>
  <data name="Category" xml:space="preserve">
    <value>Category</value>
  </data>
  <data name="City" xml:space="preserve">
    <value>City</value>
  </data>
  <data name="Complaint" xml:space="preserve">
    <value>Complaint</value>
  </data>
  <data name="ComplaintResolved" xml:space="preserve">
    <value>Resolve complaint</value>
  </data>
  <data name="ComplaintResolvedDesc" xml:space="preserve">
    <value>Complaint was resolved</value>
  </data>
  <data name="ComplaintResolvedTemplate" xml:space="preserve">
    <value>Hello, i've accepted your complaint for order {0}. Close please this complaint. Best regards, {1}.</value>
  </data>
  <data name="ComplaintSet" xml:space="preserve">
    <value>Make complaint</value>
  </data>
  <data name="ComplaintSetDesc" xml:space="preserve">
    <value>Registered customer complaint</value>
  </data>
  <data name="ComplaintSetHeader" xml:space="preserve">
    <value>New complaint was registered</value>
  </data>
  <data name="ComplaintWasResolved" xml:space="preserve">
    <value>Complaint was accepted by seller [AUTOMATIC]</value>
  </data>
  <data name="Content" xml:space="preserve">
    <value>Content</value>
  </data>
  <data name="Country" xml:space="preserve">
    <value>Country</value>
  </data>
  <data name="CreateDate" xml:space="preserve">
    <value>Creation date</value>
  </data>
  <data name="Date" xml:space="preserve">
    <value>Creation date</value>
  </data>
  <data name="DaysToGet" xml:space="preserve">
    <value>Days to pickup</value>
  </data>
  <data name="DeliveryType" xml:space="preserve">
    <value>Delivery type</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="Discount" xml:space="preserve">
    <value>Discount</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="GetByLocal" xml:space="preserve">
    <value>Come to local office</value>
  </data>
  <data name="GetByLocalDesc" xml:space="preserve">
    <value>Parcel comes to local office</value>
  </data>
  <data name="GetFromSeller" xml:space="preserve">
    <value>Get from seller</value>
  </data>
  <data name="GetFromSellerDesc" xml:space="preserve">
    <value>Parcel taken by delivery company</value>
  </data>
  <data name="Getted" xml:space="preserve">
    <value>Picked</value>
  </data>
  <data name="GettedDesc" xml:space="preserve">
    <value>Received</value>
  </data>
  <data name="House" xml:space="preserve">
    <value>House</value>
  </data>
  <data name="MailAutomaticSetComplaint" xml:space="preserve">
    <value>Hello, i found a complaint to my order {0}. Best wishes {1}.</value>
  </data>
  <data name="MailCaptionAfterSendAutomatic" xml:space="preserve">
    <value>Parcel was sent to you [AUTOMATIC]</value>
  </data>
  <data name="MailContentAfterSendAutomatic" xml:space="preserve">
    <value>Good morning, i sent a parcel for you, number of pracel {0}. Best regards. {1}</value>
  </data>
  <data name="Netto" xml:space="preserve">
    <value>Netto</value>
  </data>
  <data name="No" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="Number" xml:space="preserve">
    <value>Number</value>
  </data>
  <data name="Order" xml:space="preserve">
    <value>Order</value>
  </data>
  <data name="PayType" xml:space="preserve">
    <value>Pay type</value>
  </data>
  <data name="PrepareBySellerDesc" xml:space="preserve">
    <value>Parcel is prepare for sell by seller</value>
  </data>
  <data name="PrepatedBySeller" xml:space="preserve">
    <value>Prepared by seller</value>
  </data>
  <data name="Price" xml:space="preserve">
    <value>Price</value>
  </data>
  <data name="ReadyToPickup" xml:space="preserve">
    <value>Ready to pickup</value>
  </data>
  <data name="ReadyToPickupDesc" xml:space="preserve">
    <value>Ready to pickup</value>
  </data>
  <data name="Receiver" xml:space="preserve">
    <value>Receiver</value>
  </data>
  <data name="RemainDays" xml:space="preserve">
    <value>Days to close remain</value>
  </data>
  <data name="ReturnToSeller" xml:space="preserve">
    <value>Return to seller</value>
  </data>
  <data name="ReturnToSellerDesc" xml:space="preserve">
    <value>Parcel returns to seller</value>
  </data>
  <data name="Seller" xml:space="preserve">
    <value>Seller</value>
  </data>
  <data name="SendDate" xml:space="preserve">
    <value>Sent date</value>
  </data>
  <data name="Sender" xml:space="preserve">
    <value>Sender</value>
  </data>
  <data name="SentFromLocal" xml:space="preserve">
    <value>Sent from local office</value>
  </data>
  <data name="SentFromLocalDesc" xml:space="preserve">
    <value>Parcel was sent from local office</value>
  </data>
  <data name="Shop" xml:space="preserve">
    <value>Shop</value>
  </data>
  <data name="State" xml:space="preserve">
    <value>State</value>
  </data>
  <data name="Street" xml:space="preserve">
    <value>Street</value>
  </data>
  <data name="ToDelivery" xml:space="preserve">
    <value>To delivery</value>
  </data>
  <data name="ToDeliveryDesc" xml:space="preserve">
    <value>Courier delivery parcel to pickup point</value>
  </data>
  <data name="UniqueName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Value" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="VAT" xml:space="preserve">
    <value>Tax</value>
  </data>
  <data name="WorkTime" xml:space="preserve">
    <value>Work time</value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="ZipCode" xml:space="preserve">
    <value>Zip code</value>
  </data>
</root>