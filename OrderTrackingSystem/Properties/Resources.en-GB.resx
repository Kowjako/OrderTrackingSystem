<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Accept" xml:space="preserve">
    <value>Accept</value>
  </data>
  <data name="AcceptFullVoucher" xml:space="preserve">
    <value>Use voucher for ful order price</value>
  </data>
  <data name="AccountDetails" xml:space="preserve">
    <value>Account Data</value>
  </data>
  <data name="AddComplaint" xml:space="preserve">
    <value>Add template</value>
  </data>
  <data name="AddComplaintToFolder" xml:space="preserve">
    <value>Add template to folder</value>
  </data>
  <data name="AddFolder" xml:space="preserve">
    <value>Add folder</value>
  </data>
  <data name="AddProduct" xml:space="preserve">
    <value>Add new product</value>
  </data>
  <data name="AddProductAction" xml:space="preserve">
    <value>Add product</value>
  </data>
  <data name="AddToCart" xml:space="preserve">
    <value>Add to cart</value>
  </data>
  <data name="Age" xml:space="preserve">
    <value>Age</value>
  </data>
  <data name="All" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="AmountToMinus" xml:space="preserve">
    <value>Amount to include</value>
  </data>
  <data name="ApproveComplaint" xml:space="preserve">
    <value>Approve complaint</value>
  </data>
  <data name="AvailablePickups" xml:space="preserve">
    <value>Available delivery points</value>
  </data>
  <data name="AvailableProducts" xml:space="preserve">
    <value>Available products</value>
  </data>
  <data name="BoxPrice" xml:space="preserve">
    <value>Box</value>
  </data>
  <data name="Brutto" xml:space="preserve">
    <value>Brutto</value>
  </data>
  <data name="Cart" xml:space="preserve">
    <value>Cart</value>
  </data>
  <data name="Category" xml:space="preserve">
    <value>Category</value>
  </data>
  <data name="ChangeParcelState" xml:space="preserve">
    <value>Change parcel state</value>
  </data>
  <data name="ChangeState" xml:space="preserve">
    <value>Change parcel state</value>
  </data>
  <data name="ChooseComplaintTemplate" xml:space="preserve">
    <value>Choose complaint template</value>
  </data>
  <data name="ClearCart" xml:space="preserve">
    <value>Clear cart</value>
  </data>
  <data name="ClientsComplaints" xml:space="preserve">
    <value>Clients complaints</value>
  </data>
  <data name="ClientsOrders" xml:space="preserve">
    <value>Clients orders</value>
  </data>
  <data name="CompanyAddress" xml:space="preserve">
    <value>Company address</value>
  </data>
  <data name="CompanyComplaints" xml:space="preserve">
    <value>Clients complaints</value>
  </data>
  <data name="CompanyDetails" xml:space="preserve">
    <value>Company details</value>
  </data>
  <data name="CompanyName" xml:space="preserve">
    <value>Company name</value>
  </data>
  <data name="CompanyOrders" xml:space="preserve">
    <value>Clients orders</value>
  </data>
  <data name="Complaint" xml:space="preserve">
    <value>Complaint</value>
  </data>
  <data name="ComplaintDays" xml:space="preserve">
    <value>Remain days to solve</value>
  </data>
  <data name="ComplaintDecision" xml:space="preserve">
    <value>Seller proposition</value>
  </data>
  <data name="ComplaintDefinitionCreator" xml:space="preserve">
    <value>Complaint definiton creator</value>
  </data>
  <data name="ComplaintFolders" xml:space="preserve">
    <value>Complaint folders</value>
  </data>
  <data name="ComplaintName" xml:space="preserve">
    <value>Complaint name</value>
  </data>
  <data name="ComplaintObject" xml:space="preserve">
    <value>Complaint templates</value>
  </data>
  <data name="ComplaintProcess" xml:space="preserve">
    <value>Complaint process</value>
  </data>
  <data name="ComplaintRegister" xml:space="preserve">
    <value>Complaint registration</value>
  </data>
  <data name="ComplaintResolve" xml:space="preserve">
    <value>Complaint resolved</value>
  </data>
  <data name="ComplaintSetHeader" xml:space="preserve">
    <value>New complaint was registered</value>
  </data>
  <data name="ComplaintViews" xml:space="preserve">
    <value>Complaint templates</value>
  </data>
  <data name="ComplaintWasResolved" xml:space="preserve">
    <value>Complaint was accepted by seller [AUTOMATIC]</value>
  </data>
  <data name="Configuration" xml:space="preserve">
    <value>Configuration</value>
  </data>
  <data name="ConfirmReceive" xml:space="preserve">
    <value>Confirm delivery</value>
  </data>
  <data name="Content" xml:space="preserve">
    <value>Content</value>
  </data>
  <data name="CreateComplaint" xml:space="preserve">
    <value>Create template</value>
  </data>
  <data name="CustomerAddress" xml:space="preserve">
    <value>Localization</value>
  </data>
  <data name="Data" xml:space="preserve">
    <value>Personal data</value>
  </data>
  <data name="Delivery" xml:space="preserve">
    <value>Delivery</value>
  </data>
  <data name="DeliveryPoint" xml:space="preserve">
    <value>Delivery point</value>
  </data>
  <data name="DeliveryType" xml:space="preserve">
    <value>Delivery type</value>
  </data>
  <data name="Desktop" xml:space="preserve">
    <value>Seller desktop</value>
  </data>
  <data name="DisableFullscreen" xml:space="preserve">
    <value>Disable fullscreen</value>
  </data>
  <data name="Discount" xml:space="preserve">
    <value>Discount</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="Emailbox" xml:space="preserve">
    <value>Mail box</value>
  </data>
  <data name="EnableFullscreen" xml:space="preserve">
    <value>Enable fullscreen</value>
  </data>
  <data name="Exit" xml:space="preserve">
    <value>Exit</value>
  </data>
  <data name="ExpireDate" xml:space="preserve">
    <value>Expire date: {0:dd/MM/yyyy}</value>
  </data>
  <data name="Filter" xml:space="preserve">
    <value>Filter</value>
  </data>
  <data name="FindOrderOrSell" xml:space="preserve">
    <value>Find parcel</value>
  </data>
  <data name="FindReceiver" xml:space="preserve">
    <value>Find receiver</value>
  </data>
  <data name="FindShop" xml:space="preserve">
    <value>Find shop</value>
  </data>
  <data name="FolderName" xml:space="preserve">
    <value>Folder name</value>
  </data>
  <data name="FolderRemoving" xml:space="preserve">
    <value>Removing folder</value>
  </data>
  <data name="GenerateAutomaticMail" xml:space="preserve">
    <value>Send automatic email</value>
  </data>
  <data name="HideProgress" xml:space="preserve">
    <value>Hide progress</value>
  </data>
  <data name="Large" xml:space="preserve">
    <value>Large</value>
  </data>
  <data name="LinkedOrders" xml:space="preserve">
    <value>Linked elements</value>
  </data>
  <data name="LinkOrder" xml:space="preserve">
    <value>Link orders</value>
  </data>
  <data name="Links" xml:space="preserve">
    <value>Links</value>
  </data>
  <data name="Login" xml:space="preserve">
    <value>Login</value>
  </data>
  <data name="LoginData" xml:space="preserve">
    <value>Authorization data</value>
  </data>
  <data name="MailContent" xml:space="preserve">
    <value>Mail content</value>
  </data>
  <data name="MailCreation" xml:space="preserve">
    <value>Mail creation</value>
  </data>
  <data name="MailFrom" xml:space="preserve">
    <value>From: {0}</value>
  </data>
  <data name="MailTo" xml:space="preserve">
    <value>To: {0}</value>
  </data>
  <data name="MailView" xml:space="preserve">
    <value>Mail view</value>
  </data>
  <data name="MakeComplaint" xml:space="preserve">
    <value>Found complaint</value>
  </data>
  <data name="MakeOrder" xml:space="preserve">
    <value>Order creation</value>
  </data>
  <data name="Medium" xml:space="preserve">
    <value>Medium</value>
  </data>
  <data name="MyComplaints" xml:space="preserve">
    <value>My complaints</value>
  </data>
  <data name="MyOrders" xml:space="preserve">
    <value>My orders</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Netto" xml:space="preserve">
    <value>Netto</value>
  </data>
  <data name="Number" xml:space="preserve">
    <value>Phone</value>
  </data>
  <data name="OnlyOrder" xml:space="preserve">
    <value>Only ordered</value>
  </data>
  <data name="OnlySent" xml:space="preserve">
    <value>Only sent</value>
  </data>
  <data name="OpenDate" xml:space="preserve">
    <value>Open date</value>
  </data>
  <data name="ParcelNumber" xml:space="preserve">
    <value>Parcel number:</value>
  </data>
  <data name="ParcelSize" xml:space="preserve">
    <value>Parcel size</value>
  </data>
  <data name="Password" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="PayType" xml:space="preserve">
    <value>Pay type</value>
  </data>
  <data name="PriceFrom" xml:space="preserve">
    <value>Price from:</value>
  </data>
  <data name="PriceNetto" xml:space="preserve">
    <value>Netto</value>
  </data>
  <data name="PriceTo" xml:space="preserve">
    <value>Price to:</value>
  </data>
  <data name="ProductAmount" xml:space="preserve">
    <value>Product amount</value>
  </data>
  <data name="ProductCategory" xml:space="preserve">
    <value>Drugs categories</value>
  </data>
  <data name="ReadOnly" xml:space="preserve">
    <value>Read only</value>
  </data>
  <data name="ReceivedMails" xml:space="preserve">
    <value>Received mails</value>
  </data>
  <data name="Receiver" xml:space="preserve">
    <value>Receiver</value>
  </data>
  <data name="RemoveAlsoFromThisFolder" xml:space="preserve">
    <value>Remove also complaints from this folder</value>
  </data>
  <data name="RemoveFolder" xml:space="preserve">
    <value>Delete folder</value>
  </data>
  <data name="RemoveToParentCatalog" xml:space="preserve">
    <value>Move complaints to parent folder</value>
  </data>
  <data name="Reply" xml:space="preserve">
    <value>Reply</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="SelectBon" xml:space="preserve">
    <value>Select voucher</value>
  </data>
  <data name="SelectOrder" xml:space="preserve">
    <value>Select order</value>
  </data>
  <data name="SelectParentFolder" xml:space="preserve">
    <value>Choose parent folder</value>
  </data>
  <data name="SelectState" xml:space="preserve">
    <value>Select state</value>
  </data>
  <data name="Seller" xml:space="preserve">
    <value>Seller</value>
  </data>
  <data name="SendAutomaticEmail" xml:space="preserve">
    <value>Generate automatic mail</value>
  </data>
  <data name="SendCreation" xml:space="preserve">
    <value>Send creation</value>
  </data>
  <data name="SendElements" xml:space="preserve">
    <value>Sent elements</value>
  </data>
  <data name="SendMail" xml:space="preserve">
    <value>Send message</value>
  </data>
  <data name="SendMessage" xml:space="preserve">
    <value>Sending message</value>
  </data>
  <data name="SendMessageAction" xml:space="preserve">
    <value>Send message</value>
  </data>
  <data name="SentAndOrderElements" xml:space="preserve">
    <value>Sent and Ordered elements</value>
  </data>
  <data name="SentMails" xml:space="preserve">
    <value>Sent mails</value>
  </data>
  <data name="SetPickupDays" xml:space="preserve">
    <value>Set pikcup days</value>
  </data>
  <data name="ShowElements" xml:space="preserve">
    <value>Show elements</value>
  </data>
  <data name="ShowProgress" xml:space="preserve">
    <value>Show progress</value>
  </data>
  <data name="SingleVoucher" xml:space="preserve">
    <value>Voucher: {0}</value>
  </data>
  <data name="Small" xml:space="preserve">
    <value>Small</value>
  </data>
  <data name="Sorting" xml:space="preserve">
    <value>Sorting</value>
  </data>
  <data name="Sum" xml:space="preserve">
    <value>Sum</value>
  </data>
  <data name="Summarize" xml:space="preserve">
    <value>Summarize</value>
  </data>
  <data name="Surname" xml:space="preserve">
    <value>Surname</value>
  </data>
  <data name="TIN" xml:space="preserve">
    <value>TIN</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>Title</value>
  </data>
  <data name="ToEdit" xml:space="preserve">
    <value>Can edit</value>
  </data>
  <data name="Tracking" xml:space="preserve">
    <value>Parcel tracking</value>
  </data>
  <data name="UndoComplaint" xml:space="preserve">
    <value>Finish complaint</value>
  </data>
  <data name="VAT" xml:space="preserve">
    <value>TAX</value>
  </data>
  <data name="Voucher" xml:space="preserve">
    <value>Voucher</value>
  </data>
  <data name="Weight" xml:space="preserve">
    <value>Weight</value>
  </data>
</root>